Charles Antoine Malenfant (0616332)
CS444 - Spring 2019
Shell Assignment
-----------------------------------

ASSIGNMENT STATUS

- Implemented required feature 1 where the buildPrompt() method indicates the current directory the user is in. I also added a system call that prints the host name
  as well next to the current working directory.

- Implemented required feature 2 allowing the user to execute commands using the absolute or relative path (execvp handles both thankfully!). 

- Since I used execvp, which causes the system to search the PATH inherited by my own shell from its parent, required feature 3 is fully implemented. As stated in
  the assignment description, we do not need to support the setting of environment variables.

- Implemented required feature 4 allowing the user to redirect STDIN and STDOUT for new processes using '>' and '<'. Please note that one redirect in each direction is fine. The info struct provides useful boolean flags that allows us to choose the correct procedure to
  use for the redirection. The dup2 system call is then used to perform the correct procedure. 

- Implemented required feature 5 allowing the user to place processes in the background by appending '&' at the end of the command. The parser handles recognizing the '&' symbol and putting the process in the background. 

- Implemented required feature 6 where a history of the 30 (EXTRA) latest issued commands are stored in a FIFO list. This is done with a separate function (see shell.c) and can be checked by using the 'history' command. The latest issued commands are numbered from 1 to
  30 where the oldest command is stored as 1. A char array is used in this case and stores the user input "as is" the same way it is passed to the parser. www.cmycode.com/2014/03/c-shell-simple-history-command.html

- Implemented required feature 7 allowing the user to repeat a command stored in the list produced by the history command by using the '!' operator followed by a number that indicates the command in the history list. Negative numbers may also be used. -1 for example
  would repeat the latest issued command, -2 would issue the second latest command, etc. Please note that the number 0 is considered an invalid command and that the !# command does not appear in the list generated by the history command.

- Implemented required feature 8 which involves having several shell built-in commands. These built-in commands are caught by 'else if' statements and executed as per the assignment guidelines. All of the built-in commands are working and their usage are described in
  the 'help' command. 

- Implemented required feature 9 which prevents the user from exiting the shell if there are still background processes running. This is done by checking the status of the linked list used for 'jobs'.

- Required feature 10 is not a required feature but simply a helpful assumption. 

EXTRAS

- The prompt not only prints the current working directory but also prints the host name as well.
- The command history list generated by the command 'history' holds not 10 but 30 entries.
- The '!' command, allows for negative numbers less than -1 (I do not know if this is what was expected of us). 

BUGS & POSSIBLE IMPROVEMENTS

- The code itself could be way more organized and structured. I only modified the shell.c file to implement all of the required features and barely wrote any other functions to try and modularize my main() function. In the industry, my code would not look the same. I
  realize I did this because of the fact that I will probably never re-use this code again in my life. My lack of experience in C was also a contributing factor to the disorganization. Despite all of this, the code is well commented. 

- Error-checking might not be at its best throughout the code and could be included more extensively to ensure smooth running of the shell and prevent user-error.

- There might be other issues or bugs with my code that I have not noticed but everything seems to be working flawlessly assuming correct user input.  

HOW TO USE

- Navigate to the directory where the .zip file of my Moodle submission was downloaded using the Linux terminal.
- Unzip the files using the following command: unzip malenfc_shellAssignment.zip. 
- Type and enter the following command: $ make clean, to make sure that there are no object files or executables that we do not want still there.
- Type and enter the following command: $ make. This will produce an executable for my shell.
- Run the shell by issuing the following command: $ ./shell. You should be in the same directory as the directory where the generated shell executable is. 
- Typing the command help will show the shell built-in functions that are available (see required feature 8). Any non built-in commands can be executed just as in any other shells.
- This README, README.shell offers exhaustive information about my shell while README.parser offers its share of information about the parser used in my code.
- Enjoy :) 

NOTES & COMMENTS

- PLEASE NOTE THAT I HAVE USED JEANNA MATTHEWS' SKELETON CODE FOR THE ASSIGNMENT.

- Please also note that I had extremely limited knowledge of the C language as well as Operating Systems prior to this assignment. For this reason primarily, I did not particularly enjoy working on this assignment. Even though I have tried my best on this and invested
  over 15 hours of my time, I had a very difficult time. This is also why, besides the few extras listed above, there are no really major optional features that I decided to try to add out of sheer enjoyment. It would be very considerate if the grader could keep that in
  mind while grading my assignment. On the bright side, I did learn a lot which I think was the purpose of this assignment. 

- I have gotten a substantial amount of help for Graham (thanks a lot!) for the assignment, as well as some help from other peers in the class (I forget their names). Please also note that I have done some of this assignment alongside my classmate Lee Taylor. Also, for
  parts of the implementation of the history feature, I have used an online resource to aid me. This resource can be found at: www.cmycode.com/2014/03/c-shell-simple-history-command.html.  

- I removed the printing of the info struct so it is easier for the grader to grade my assignment.

- My entire code was written with a Linux OS (ITL computer) and is meant to run on this platform.
